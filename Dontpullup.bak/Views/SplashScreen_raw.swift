{'version': '1.0.0', 'filePath': 'file:///Users/melfranklin/Documents/Dontpullupgit/Dontpullup/dontpullup/Views/SplashScreen.swift', 'hash': '076b40df004e66c765b5cdaef85dbc4a5a179e3108c55d219b06c7ebe870ba61', 'documentChunks': [{'id': 'file:///Users/melfranklin/Documents/Dontpullupgit/Dontpullup/dontpullup/Views/SplashScreen.swift#0', 'chunk': 'import SwiftUI\nimport MapKit\n\n// Map styling extension is now the single implementation\nextension View {\n    func withMapStyle() -> some View {\n        self.preferredColorScheme(.dark)\n            .background(Color.black)\n    }\n}\n\nstruct SplashScreen: View {\n    @EnvironmentObject private var authState: AuthState\n    @EnvironmentObject private var networkMonitor: NetworkMonitor\n    @State private var isLoading = true\n    @State private var scale = 0.7\n    @State private var opacity = 0.0\n    \n    var body: some View {\n        GeometryReader { geometry in\n            ZStack { // Background ZStack\n                // Background Image\n                Image("welcome_background")\n                    .resizable()\n                    .aspectRatio(contentMode: .fill)\n                    .edgesIgnoringSafeArea(.all)\n                \n                // Semi-transparent overlay\n                Color.black.opacity(0.7)\n                    .edgesIgnoringSafeArea(.all)\n                \n                // Original ZStack content\n                ZStack {\n                    // Only show splash content, controlled by RootView\'s isLoading\n                    SplashContent()\n                        .scaleEffect(scale)\n                        .opacity(opacity)\n                    // REMOVED mainContent logic from here\n                }\n            }\n        }\n        .preferredColorScheme(.dark)\n        .onAppear {\n            // Keep onAppear logic for animation\n            DispatchQueue.main.asyncAfter(deadline: .now() + 1.5) {\n                // RootView controls isLoading, so we don\'t set it here\n                // Let RootView handle dismissal after its delay\n            }\n            withAnimation(.easeOut(duration: 0.7)) {\n                scale = 1.0\n                opacity = 1.0\n            }\n        }\n    }\n}\n\n// Helper Views\nprivate struct SplashContent: View {\n    // Create a computed property to get the app icon\n    private var appIcon: UIImage? {\n        // Try different sizes, starting with the largest\n        let iconNames = ["1024 1", "180", "167 3", "152", "120", "76"]\n        for name in iconNames {\n            if let image = UIImage(named: name) {\n                return image\n            }\n        }\n        return nil\n    }\n    \n    var body: some View {\n        GeometryReader { geometry in\n            let size = min(geometry.size.width, geometry.size.height)\n            \n            VStack(spacing: size *', 'tokenCount': 500, 'range': {'start': 0, 'end': 2447}}, {'id': 'file:///Users/melfranklin/Documents/Dontpullupgit/Dontpullup/dontpullup/Views/SplashScreen.swift#375', 'chunk': ' computed property to get the app icon\n    private var appIcon: UIImage? {\n        // Try different sizes, starting with the largest\n        let iconNames = ["1024 1", "180", "167 3", "152", "120", "76"]\n        for name in iconNames {\n            if let image = UIImage(named: name) {\n                return image\n            }\n        }\n        return nil\n    }\n    \n    var body: some View {\n        GeometryReader { geometry in\n            let size = min(geometry.size.width, geometry.size.height)\n            \n            VStack(spacing: size * 0.05) {\n                Group {\n                    if let icon = appIcon {\n                        Image(uiImage: icon)\n                            .resizable()\n                            .interpolation(.high)\n                            .aspectRatio(contentMode: .fit)\n                    } else {\n                        // Fallback to a system icon if app icon is not found\n                        Image(systemName: "map.fill")\n                            .resizable()\n                            .aspectRatio(contentMode: .fit)\n                            .foregroundColor(.red)\n                    }\n                }\n                .frame(width: size * 0.4, height: size * 0.4)\n                .clipShape(RoundedRectangle(cornerRadius: 20))\n                .shadow(color: .white.opacity(0.3), radius: 10)\n                \n                Text("Don\'t Pull Up")\n                    .font(.system(size: size * 0.08, weight: .bold, design: .rounded))\n                    .foregroundColor(.white)\n            }\n            .position(x: geometry.size.width / 2, y: geometry.size.height / 2)\n        }\n    }\n}\n\n// Renamed to avoid conflict\nprivate struct SplashLoadingView: View {\n    var body: some View {\n        ProgressView()\n            .progressViewStyle(CircularProgressViewStyle(tint: .white))\n    }\n}\n', 'tokenCount': 389, 'range': {'start': 1898, 'end': 3760}}]}
